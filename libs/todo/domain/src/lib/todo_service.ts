// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.26.1
// source: todo_service.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Todo } from "./todo";

export const protobufPackage = "todo.service";

export interface GetTodoRequest {
  id: string;
}

export interface GetTodoResponse {
  todo: Todo | undefined;
}

export interface GetTodosRequest {
  ids: string[];
}

export interface GetTodosResponse {
  todos: Todo[];
}

export interface CreateTodoRequest {
  title: string;
  description?: string | undefined;
}

export interface CreateTodoResponse {
  todo: Todo | undefined;
}

export interface CompleteTodoRequest {
  id: string;
}

export interface CompleteTodoResponse {
  todo: Todo | undefined;
}

export const TODO_SERVICE_PACKAGE_NAME = "todo.service";

export interface TodoServiceClient {
  getTodo(request: GetTodoRequest, metadata: Metadata, ...rest: any): Observable<GetTodoResponse>;

  getTodos(request: Observable<GetTodoRequest>, metadata: Metadata, ...rest: any): Observable<GetTodoResponse>;

  getTodosByIds(request: GetTodosRequest, metadata: Metadata, ...rest: any): Observable<GetTodoResponse>;

  getTodosThroughStream(
    request: Observable<GetTodoRequest>,
    metadata: Metadata,
    ...rest: any
  ): Observable<GetTodosResponse>;

  createTodo(request: CreateTodoRequest, metadata: Metadata, ...rest: any): Observable<CreateTodoResponse>;

  completeTodo(request: CompleteTodoRequest, metadata: Metadata, ...rest: any): Observable<CompleteTodoResponse>;
}

export interface TodoServiceController {
  getTodo(
    request: GetTodoRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<GetTodoResponse> | Observable<GetTodoResponse> | GetTodoResponse;

  getTodos(request: Observable<GetTodoRequest>, metadata: Metadata, ...rest: any): Observable<GetTodoResponse>;

  getTodosByIds(request: GetTodosRequest, metadata: Metadata, ...rest: any): Observable<GetTodoResponse>;

  getTodosThroughStream(
    request: Observable<GetTodoRequest>,
    metadata: Metadata,
    ...rest: any
  ): Promise<GetTodosResponse> | Observable<GetTodosResponse> | GetTodosResponse;

  createTodo(
    request: CreateTodoRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<CreateTodoResponse> | Observable<CreateTodoResponse> | CreateTodoResponse;

  completeTodo(
    request: CompleteTodoRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<CompleteTodoResponse> | Observable<CompleteTodoResponse> | CompleteTodoResponse;
}

export function TodoServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getTodo", "getTodosByIds", "createTodo", "completeTodo"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("TodoService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = ["getTodos", "getTodosThroughStream"];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("TodoService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const TODO_SERVICE_NAME = "TodoService";
